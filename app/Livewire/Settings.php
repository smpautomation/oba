<?php
namespace App\Livewire;

use App\Models\model_settings;
use App\Models\Sections;
use Illuminate\Support\Facades\Log;
use Livewire\Component;

class Settings extends Component
{
    public $models;
    public $sections;

    //properties for add/remove section
    public $selectedModelAddRemove = '';
    public $searchTerm = '';
    public $filteredModels;
    public $totalModels;
    public $showAddForm = false;
    public $newModelName = '';

    public $selectedSectionAddRemove = '';
    public $searchTermSection = '';
    public $filteredSections;
    public $totalSections;
    public $showAddFormSection = false;
    public $newSectionName = '';

    // properties for model settings
    public $selectedModel = '';
    public $scanned_qr_pc = true;
    public $sir_qs = true;
    public $vmi_mn = true;
    public $sir_mc = true;
    public $vmi_mc = true;
    public $specific_label_mc = true;
    public $picklist_pn = true;
    public $sir_pn = true;
    public $vmi_pn = true;
    public $sir_po = true;
    public $vmi_po = true;
    public $specific_label_po = true;


    //properties for section visibility
    public $showAddRemove = false;
    public $showChecklistConfiguration = false;
    public $showSystemLogs = false;

    //properties for system logs
    public $systemLogs;

    public function mount()
    {
        $this->models = model_settings::all();
        $this->totalModels = $this->models->count();
        $this->filteredModels = $this->models;
        $this->sections = Sections::all();
        $this->totalSections = $this->sections->count();
        $this->filteredSections = $this->sections;
        $this->systemLogs = [
            [
                'id' => 1, // Placeholder for ID, will be auto-generated by the database
                'LogName' => 'System',
                'LogType' => 'info',
                'action' => 'Initialization',
                'description' => 'Settings component initialized.',
                'user_id' => 'test',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'id' => 2, // Placeholder for ID, will be auto-generated by the database
                'LogName' => 'System',
                'LogType' => 'error',
                'action' => 'Mount',
                'description' => 'Settings component mounted with initial data.',
                'user_id' => 'test2',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'id' => 3, // Placeholder for ID, will be auto-generated by the database
                'LogName' => 'System',
                'LogType' => 'warning',
                'action' => 'Configuration',
                'description' => 'Settings configuration loaded.',
                'user_id' => 'test3',
                'created_at' => now(),
                'updated_at' => now(),
            ]
            
        ];
    }

    public function showAddRemoveSection()
    {
        $this->showAddRemove = !$this->showAddRemove;
        $this->showChecklistConfiguration = false; // Hide other sections
        $this->showSystemLogs = false; // Hide other sections
        Log::info('Toggle Add/Remove Section: ' . ($this->showAddRemove ? 'Shown' : 'Hidden'));
    }

    public function showChecklistConfigurationSection()
    {
        $this->showChecklistConfiguration = !$this->showChecklistConfiguration;
        $this->showAddRemove = false; // Hide other sections
        $this->showSystemLogs = false; // Hide other sections
        Log::info('Toggle Checklist Configuration Section: ' . ($this->showChecklistConfiguration ? 'Shown' : 'Hidden'));
    }

    public function showSystemLogsSection(){
        $this->showSystemLogs = !$this->showSystemLogs;
        $this->showAddRemove = false; // Hide other sections
        $this->showChecklistConfiguration = false; // Hide other sections
        Log::info('Toggle Checklist Configuration Section: ' . ($this->showSystemLogs ? 'Shown' : 'Hidden'));
    }

    public function updatedSelectedModel($value)
    {
        Log::info('Selected model updated: ' . $value);
        
        if (!empty($value)) {
            $modelData = model_settings::where('model_name', $value)->first();
           
            Log::info('Model data found: ' . ($modelData ? 'Yes' : 'No'));
           
            if ($modelData) {
                $this->scanned_qr_pc = (bool) $modelData->scanned_qr_pc;
                $this->sir_qs = (bool) $modelData->sir_qs;
                $this->vmi_mn = (bool) $modelData->vmi_mn;
                $this->sir_mc = (bool) $modelData->sir_mc;
                $this->vmi_mc = (bool) $modelData->vmi_mc;
                $this->specific_label_mc = (bool) $modelData->specific_label_mc;
                $this->picklist_pn = (bool) $modelData->picklist_pn;
                $this->sir_pn = (bool) $modelData->sir_pn;
                $this->vmi_pn = (bool) $modelData->vmi_pn;
                $this->sir_po = (bool) $modelData->sir_po;
                $this->vmi_po = (bool) $modelData->vmi_po;
                $this->specific_label_po = (bool) $modelData->specific_label_po;
                
                Log::info('Settings loaded for model: ' . $value);
            }
        } else {
            // Reset all values when no model is selected
            $this->resetSettings();
            Log::info('Settings reset - no model selected');
        }
    
        $this->render();
    }
   
    private function resetSettings()
    {
        $this->scanned_qr_pc = true;
        $this->sir_qs = true;
        $this->vmi_mn = true;
        $this->sir_mc = true;
        $this->vmi_mc = true;
        $this->specific_label_mc = true;
        $this->picklist_pn = true;
        $this->sir_pn = true;
        $this->vmi_pn = true;
        $this->sir_po = true;
        $this->vmi_po = true;
        $this->specific_label_po = true;
    }

    public function saveConfiguration()
    {
        Log::info('Attempting to save configuration for model: ' . $this->selectedModel);
        
        if (!empty($this->selectedModel)) {
            $modelData = model_settings::where('model_name', $this->selectedModel)->first();
           
            if ($modelData) {
                $modelData->update([
                    'scanned_qr_pc' => $this->scanned_qr_pc,
                    'sir_qs' => $this->sir_qs,
                    'vmi_mn' => $this->vmi_mn,
                    'sir_mc' => $this->sir_mc,
                    'vmi_mc' => $this->vmi_mc,
                    'specific_label_mc' => $this->specific_label_mc,
                    'picklist_pn' => $this->picklist_pn,
                    'sir_pn' => $this->sir_pn,
                    'vmi_pn' => $this->vmi_pn,
                    'sir_po' => $this->sir_po,
                    'vmi_po' => $this->vmi_po,
                    'specific_label_po' => $this->specific_label_po,
                ]);
                
                session()->flash('message', 'Configuration saved successfully!');
                Log::info('Configuration saved successfully for model: ' . $this->selectedModel);
            } else {
                session()->flash('error', 'Model not found in database!');
                Log::error('Model not found: ' . $this->selectedModel);
            }
        } else {
            session()->flash('error', 'Please select a model first!');
            Log::warning('Attempted to save without selecting a model');
        }
    }

    public function updatedSearchTerm()
    {
        $this->filterModels();
    }

    public function filterModels()
    {
        if (empty($this->searchTerm)) {
            $this->filteredModels = $this->models;
        } else {
            $this->filteredModels = $this->models->filter(function ($model) {
                return stripos($model->model_name, $this->searchTerm) !== false;
            });
        }
    }

    public function selectModel($modelName)
    {
        $this->selectedModelAddRemove = $modelName;
        $this->searchTerm = '';
        $this->filteredModels = $this->models;
        
        // Emit event to parent component if needed
        
    }

    public function clearSelection()
    {
        $this->selectedModelAddRemove = '';
        $this->searchTerm = '';
        $this->filteredModels = $this->models;
        
    }

    public function deleteModel()
    {
        if ($this->selectedModelAddRemove) {
            // Find and delete the model from database
            $model = model_settings::where('model_name', $this->selectedModelAddRemove)->first();
            if ($model) {
                $model->delete();
                
                // Refresh the models list
                $this->models = model_settings::orderBy('model_name')->get();
                $this->totalModels = $this->models->count();
                $this->filteredModels = $this->models;
                
                // Clear selection after deletion
                $this->selectedModelAddRemove = '';
                $this->searchTerm = '';
                
                // Show success message
                session()->flash('message', 'Model deleted successfully!');
            }
        }
    }

    public function addModel()
    {
        $this->validate([
            'newModelName' => 'required|string|max:255|unique:model_settings,model_name'
        ]);

        // Create new model
        model_settings::create([
            'model_name' => $this->newModelName
        ]);

        // Refresh the models list
        $this->models = model_settings::orderBy('model_name')->get();
        $this->totalModels = $this->models->count();
        $this->filteredModels = $this->models;

        // Reset form
        $this->newModelName = '';
        $this->showAddForm = false;

        // Show success message
        session()->flash('message', 'Model added successfully!');
    }

    public function cancelAdd()
    {
        $this->newModelName = '';
        $this->showAddForm = false;
    }

    

    public function updatedSearchTermSection()
    {
        $this->filterSections();
    }

    public function filterSections()
    {
        if (empty($this->searchTermSection)) {
            $this->filteredSections = $this->sections;
        } else {
            $this->filteredSections = $this->sections->filter(function ($section) {
                return stripos($section->section, $this->searchTermSection) !== false;
            });
        }
    }

    public function selectSection($sectionName)
    {
        $this->selectedSectionAddRemove = $sectionName;
        $this->searchTermSection = '';
        $this->filteredSections = $this->sections;
            
    }

    public function clearSelectionSection()
    {
        $this->selectedSectionAddRemove = '';
        $this->searchTermSection = '';
        $this->filteredSections = $this->sections;
        
    }

    public function deleteSection()
    {
        if ($this->selectedSectionAddRemove) {
            $section = Sections::where('section', $this->selectedSectionAddRemove)->first();
            if ($section) {
                $section->delete();
                
                $this->sections = Sections::orderBy('section')->get();
                $this->totalSections = $this->sections->count();
                $this->filteredSections = $this->sections;
                
                $this->selectedSectionAddRemove = '';
                $this->searchTermSection = '';
                
                // Show success message
                session()->flash('message', 'Section deleted successfully!');
            }
        }
    }

    public function addSection()
    {
        $this->validate([
            'newSectionName' => 'required|string|max:15|unique:section,section'
        ]);

        Sections::create([
            'section' => $this->newSectionName
        ]);

        $this->sections = Sections::orderBy('section')->get();
        $this->totalSections = $this->sections->count();
        $this->filteredSections = $this->sections;

        $this->newSectionName = '';
        $this->showAddFormSection = false;

        // Show success message
        session()->flash('message', 'Section added successfully!');
    }

    public function cancelAddSection()
    {
        $this->newSectionName = '';
        $this->showAddFormSection = false;
    }

    protected function rules()
    {
        return [
            'newModelName' => 'required|string|max:8|unique:model_settings,model_name',
            'newSectionName' => 'required|string|max:15|unique:section,section'
        ];
    }

    protected function messages()
    {
        return [
            'newModelName.required' => 'Model name is required.',
            'newModelName.unique' => 'This model name already exists.',
            'newModelName.max' => 'Model name cannot exceed 8 characters.',
            'newSectionName.required' => 'Section name is required.',
            'newSectionName.unique' => 'This section name already exists.',
            'newSectionName.max' => 'Section name cannot exceed 15 characters.'
        ];
    }

    public function render()
    {

        return view('livewire.settings');
    }

}